# Orb 'circleci/aws-cli@2.1.0' resolved to 'circleci/aws-cli@2.1.0'
# Orb 'circleci/aws-ecr@8.0.0' resolved to 'circleci/aws-ecr@8.0.0'
version: 2
jobs:
  aws-ecr/build-and-push-image:
    machine:
      docker_layer_caching: false
      image: ubuntu-2004:202107-02
    resource_class: medium
    steps:
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          if [ ! "$(which aws)" ] || [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
              # setup
              export AWS_CLI_VER_STRING=""
              if [ ! "$PARAM_AWS_CLI_VERSION" = "latest" ]; then export AWS_CLI_VER_STRING="-$PARAM_AWS_CLI_VERSION"; fi

              # Uninstall existing AWS CLI if override is enabled.
              if [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
                  AWS_CLI_PATH=$(which aws)
                  if [ -n "$AWS_CLI_PATH" ]; then
                      EXISTING_AWS_VERSION=$(aws --version)
                      echo "Uninstalling ${EXISTING_AWS_VERSION}"
                      # shellcheck disable=SC2012
                      if [ -L "$AWS_CLI_PATH" ]; then
                          AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                      fi
                      $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                  else
                      echo "No AWS install found"
                  fi
              fi

              echo "Installing AWS CLI v2"
              cd /tmp || exit
              # Platform check
              if uname -a | grep "Darwin"; then
                  export SYS_ENV_PLATFORM=macos
              elif uname -a | grep "x86_64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_x86
              elif uname -a | grep "aarch64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_arm
              else
                  echo "This platform appears to be unsupported."
                  uname -a
                  exit 1
              fi
              echo "Platform $SYS_ENV_PLATFORM"
              # Install per platform
              case $SYS_ENV_PLATFORM in
              linux_x86)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              macos)
                  curl -sSL "https://awscli.amazonaws.com/AWSCLIV2${AWS_CLI_VER_STRING}.pkg" -o "AWSCLIV2.pkg"
                  $SUDO installer -pkg AWSCLIV2.pkg -target /
                  rm AWSCLIV2.pkg
                  ;;
              linux_arm)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              *)
                  echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                  echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                  exit 1
              ;;
              esac
              # Toggle AWS Pager
              if [ "$PARAM_AWS_CLI_DISABLE_PAGER" = 1 ]; then
                  if [ -z "${AWS_PAGER+x}" ]; then
                      echo 'export AWS_PAGER=""' >> "$BASH_ENV"
                      echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                      echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                  fi
              fi
          else
              echo "AWS CLI is already installed, skipping installation."
              aws --version
          fi
        environment:
          PARAM_AWS_CLI_DISABLE_PAGER: true
          PARAM_AWS_CLI_OVERRIDE: false
          PARAM_AWS_CLI_VERSION: latest
        name: Install AWS CLI - latest
    - run:
        name: Assume role with OIDC web identity
        command: |
          # use the OpenID Connect token to obtain AWS credentials
          read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN <<< \
            $(aws sts assume-role-with-web-identity \
             --role-arn ${AWS_ROLE_ARN} \
             --role-session-name "CI-${CIRCLE_WORKFLOW_ID}-build-push-image" \
             --web-identity-token $CIRCLE_OIDC_TOKEN \
             --duration-seconds 3600 \
             --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
             --output text)
          echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
          echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV
          echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> $BASH_ENV
    - run:
        name: Check identity
        command: |
          # interact with AWS
          aws sts get-caller-identity
    - checkout
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          if [ ! "$(which aws)" ] || [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
              # setup
              export AWS_CLI_VER_STRING=""
              if [ ! "$PARAM_AWS_CLI_VERSION" = "latest" ]; then export AWS_CLI_VER_STRING="-$PARAM_AWS_CLI_VERSION"; fi

              # Uninstall existing AWS CLI if override is enabled.
              if [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
                  AWS_CLI_PATH=$(which aws)
                  if [ -n "$AWS_CLI_PATH" ]; then
                      EXISTING_AWS_VERSION=$(aws --version)
                      echo "Uninstalling ${EXISTING_AWS_VERSION}"
                      # shellcheck disable=SC2012
                      if [ -L "$AWS_CLI_PATH" ]; then
                          AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                      fi
                      $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                  else
                      echo "No AWS install found"
                  fi
              fi

              echo "Installing AWS CLI v2"
              cd /tmp || exit
              # Platform check
              if uname -a | grep "Darwin"; then
                  export SYS_ENV_PLATFORM=macos
              elif uname -a | grep "x86_64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_x86
              elif uname -a | grep "aarch64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_arm
              else
                  echo "This platform appears to be unsupported."
                  uname -a
                  exit 1
              fi
              echo "Platform $SYS_ENV_PLATFORM"
              # Install per platform
              case $SYS_ENV_PLATFORM in
              linux_x86)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              macos)
                  curl -sSL "https://awscli.amazonaws.com/AWSCLIV2${AWS_CLI_VER_STRING}.pkg" -o "AWSCLIV2.pkg"
                  $SUDO installer -pkg AWSCLIV2.pkg -target /
                  rm AWSCLIV2.pkg
                  ;;
              linux_arm)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              *)
                  echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                  echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                  exit 1
              ;;
              esac
              # Toggle AWS Pager
              if [ "$PARAM_AWS_CLI_DISABLE_PAGER" = 1 ]; then
                  if [ -z "${AWS_PAGER+x}" ]; then
                      echo 'export AWS_PAGER=""' >> "$BASH_ENV"
                      echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                      echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                  fi
              fi
          else
              echo "AWS CLI is already installed, skipping installation."
              aws --version
          fi
        environment:
          PARAM_AWS_CLI_DISABLE_PAGER: true
          PARAM_AWS_CLI_OVERRIDE: false
          PARAM_AWS_CLI_VERSION: latest
        name: Install AWS CLI - latest
    - run:
        command: |
          PARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo "\$$PARAM_AWS_CLI_ACCESS_KEY_ID")
          PARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo "\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY")
          PARAM_AWS_CLI_REGION=$(eval echo "\$$PARAM_AWS_CLI_REGION")
          PARAM_AWS_CLI_ROLE_ARN=$(eval echo "${PARAM_AWS_CLI_ROLE_ARN}")

          aws configure set aws_access_key_id \
              "$PARAM_AWS_CLI_ACCESS_KEY_ID" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          aws configure set aws_secret_access_key \
              "$PARAM_AWS_CLI_SECRET_ACCESS_KEY" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"
              
          if [ -n "${AWS_SESSION_TOKEN}" ]; then
             aws configure set aws_session_token \
                 "$AWS_SESSION_TOKEN" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"

          if [ "$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION" = "1" ]; then
              aws configure set default.region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ "$PARAM_AWS_CLI_CONFIG_PROFILE_REGION" = "1" ]; then
              aws configure set region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ -n "$PARAM_AWS_CLI_ROLE_ARN" ]; then
              echo "The role-arn parameter is deprecated. Please use the role-arn-setup command."
              aws configure set role_arn "$PARAM_AWS_CLI_ROLE_ARN" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi
        environment:
          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true
          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true
          PARAM_AWS_CLI_PROFILE_NAME: default
          PARAM_AWS_CLI_REGION: AWS_DEFAULT_REGION
          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
        name: Configure AWS Access Key ID
    - run:
        command: |
          #!/bin/bash
          set -x
          REGION=$(eval echo "${PARAM_REGION}")
          ACCOUNT_URL="${!PARAM_REGISTRY_ID}.dkr.ecr.${REGION}.amazonaws.com"
          ECR_COMMAND="ecr"

          if [ "$PARAM_PUBLIC_REGISTRY" == "1" ]; then
              REGION="us-east-1"
              ACCOUNT_URL="public.ecr.aws"
              ECR_COMMAND="ecr-public"
          fi

          if [ -n "${PARAM_PROFILE_NAME}" ]; then
              set -- "$@" --profile "${PARAM_PROFILE_NAME}"
          fi

          if [ -f ~/.docker/config.json ]; then
              echo "Credential helper is already installed"
          else
              aws "${ECR_COMMAND}" get-login-password --region "${REGION}" "$@" | docker login --username AWS --password-stdin "${ACCOUNT_URL}"
          fi
        environment:
          PARAM_PROFILE_NAME: default
          PARAM_PUBLIC_REGISTRY: false
          PARAM_REGION: us-east-1
          PARAM_REGISTRY_ID: AWS_ECR_REGISTRY_ID
        name: Log into Amazon ECR
    - run:
        command: |
          #!/bin/bash 
          REPO=$(eval echo "${PARAM_REPO}")
          REGION=$(eval echo "${PARAM_REGION}")
          TAG=$(eval echo "${PARAM_TAG}")
          ACCOUNT_URL="${!PARAM_REGISTRY_ID}.dkr.ecr.${REGION}.amazonaws.com"
          ECR_COMMAND="ecr"
          number_of_tags_in_ecr=0
          docker_tag_args=""

          IFS="," read -ra PLATFORMS <<<"${PARAM_PLATFORM}"
          arch_count=${#PLATFORMS[@]}

          if [ "${PARAM_PUBLIC_REGISTRY}" == "1" ]; then
            if [ "$arch_count" -gt 1 ]; then
              echo "AWS ECR does not support multiple platforms for public registries. Please specify only one platform and try again"
              exit 1
            fi

            ECR_COMMAND="ecr-public"
            ACCOUNT_URL="public.ecr.aws/${!PARAM_REGISTRY_ID}"
          fi

          IFS="," read -ra DOCKER_TAGS <<<"${TAG}"
          for tag in "${DOCKER_TAGS[@]}"; do
            if [ "${PARAM_SKIP_WHEN_TAGS_EXIST}" = "1" ]; then
              docker_tag_exists_in_ecr=$(aws "${ECR_COMMAND}" describe-images --profile "${PARAM_PROFILE_NAME}" --registry-id "${!PARAM_REGISTRY_ID}" --region "${REGION}" --repository-name "${REPO}" --query "contains(imageDetails[].imageTags[], '${tag}')")
              if [ "${docker_tag_exists_in_ecr}" = "1" ]; then
                docker pull "${ACCOUNT_URL}/${REPO}:${tag}"
                number_of_tags_in_ecr=$((number_of_tags_in_ecr += 1))
              fi
            fi
            docker_tag_args="${docker_tag_args} -t ${ACCOUNT_URL}/${REPO}:${tag}"
          done

          if [ "${PARAM_SKIP_WHEN_TAGS_EXIST}" = "0" ] || [[ "${PARAM_SKIP_WHEN_TAGS_EXIST}" = "1" && ${number_of_tags_in_ecr} -lt ${#DOCKER_TAGS[@]} ]]; then
            if [ "${PARAM_PUSH_IMAGE}" == "1" ]; then
              set -- "$@" --push
            fi

            if [ -n "$PARAM_EXTRA_BUILD_ARGS" ]; then
              set -- "$@" "${PARAM_EXTRA_BUILD_ARGS}"
            fi

            if [ "${PARAM_PUBLIC_REGISTRY}" == "1" ]; then
              docker buildx build \
                -f "${PARAM_PATH}"/"${PARAM_DOCKERFILE}" \
                ${docker_tag_args} \
                --platform "${PARAM_PLATFORM}" \
                --progress plain \
                "$@" \
                "${PARAM_PATH}"
            else
              docker context create builder
              docker run --privileged --rm tonistiigi/binfmt --install all
              docker --context builder buildx create --use
              docker --context builder buildx build \
                -f "${PARAM_PATH}"/"${PARAM_DOCKERFILE}" \
                ${docker_tag_args} \
                --platform "${PARAM_PLATFORM}" \
                --progress plain \
                "$@" \
                "${PARAM_PATH}"
            fi
          fi
        environment:
          PARAM_DOCKERFILE: Dockerfile
          PARAM_EXTRA_BUILD_ARGS: ''
          PARAM_PATH: .
          PARAM_PLATFORM: linux/amd64
          PARAM_PROFILE_NAME: default
          PARAM_PUBLIC_REGISTRY: false
          PARAM_PUSH_IMAGE: true
          PARAM_REGION: us-east-1
          PARAM_REGISTRY_ID: AWS_ECR_REGISTRY_ID
          PARAM_REPO: kelvin-hello-alpine
          PARAM_SKIP_WHEN_TAGS_EXIST: false
          PARAM_TAG: ${CIRCLE_SHA1}
        name: Build Docker Image with buildx
        no_output_timeout: 10m
    - store_artifacts:
        path: test.txt
workflows:
  explore:
    jobs:
    - aws-ecr/build-and-push-image:
        context: aws-ecr-context
  version: 2


# version: 2.1

# orbs: 
#   aws-cli: circleci/aws-cli@2.1.0
#   aws-ecr: circleci/aws-ecr@8.0.0

# workflows:
#   explore:
#     jobs:
#       - aws-ecr/build-and-push-image:
#           dockerfile: Dockerfile
#           executor: aws-ecr/default
#           public-registry: false
#           push-image: true
#           repo: kelvin-hello-alpine
#           skip-when-tags-exist: false
#           tag: '${CIRCLE_SHA1}'
#           region: 'us-east-1'
#           # includes AWS_DEFAULT_REGION, AWS_REGISTRY_ID, AWS_ROLE_ARN
#           context: aws-ecr-context
#           pre-steps:
#             - aws-cli/install
#             - run:
#                 name: Assume role with OIDC web identity
#                 command: |
#                   # use the OpenID Connect token to obtain AWS credentials
#                   read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \<<< \
#                     $(aws sts assume-role-with-web-identity \
#                      --role-arn ${AWS_ROLE_ARN} \
#                      --role-session-name "CI-${CIRCLE_WORKFLOW_ID}-build-push-image" \
#                      --web-identity-token $CIRCLE_OIDC_TOKEN \
#                      --duration-seconds 3600 \
#                      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
#                      --output text)
#                   echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
#                   echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV
#                   echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> $BASH_ENV
#             - run:
#                 name: Check identity
#                 command: |
#                   # interact with AWS
#                   aws sts get-caller-identity

