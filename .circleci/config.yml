version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.0.0
  # For checking ecr-login issues with IAM role
  # imported from https://github.com/kelvintaywl/aws-ecr-orb/tree/fix-use-new-profile-name
  kelvintaywl-aws-ecr:
    version: 2.1
    description: |
      Build images and push them to the Amazon Elastic Container Registry.
    display:
      home_url: https://aws.amazon.com/ecr/
      source_url: https://github.com/CircleCI-Public/aws-ecr-orb
    orbs:
      aws-cli: circleci/aws-cli@2.1.0
    commands:
      ecr-login:
        description: Authenticate into the Amazon ECR service
        parameters:
          aws-access-key-id:
            default: AWS_ACCESS_KEY_ID
            description: |
              AWS access key id for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_ACCESS_KEY.
            type: env_var_name
          aws-cli-version:
            default: latest
            description: Select a specific version of the AWS v2 CLI. By default the latest version will be used.
            type: string
          aws-secret-access-key:
            default: AWS_SECRET_ACCESS_KEY
            description: |
              AWS secret key for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
            type: env_var_name
          new-profile-name:
            default: ""
            description: Name of new profile associated with role arn.
            type: string
          profile-name:
            default: ""
            description: |
              AWS profile name to be configured.
            type: string
          public-registry:
            default: false
            description: Set to true if building and pushing an image to a Public Registry on ECR.
            type: boolean
          region:
            default: ${AWS_REGION}
            description: |
              AWS region of ECR repository. Defaults to environment variable ${AWS_REGION}
            type: string
          registry-id:
            default: AWS_ECR_REGISTRY_ID
            description: |
              The 12 digit AWS id associated with the ECR account. This field is required
            type: env_var_name
          role-arn:
            default: ""
            description: Role ARN that the profile should take.
            type: string
          source-profile:
            default: default
            description: Source profile containing credentials to assume the role with role-arn.
            type: string
        steps:
          - aws-cli/setup:
              aws-access-key-id: <<parameters.aws-access-key-id>>
              aws-secret-access-key: <<parameters.aws-secret-access-key>>
              profile-name: <<parameters.profile-name>>
              version: <<parameters.aws-cli-version>>
          - when:
              condition: <<parameters.role-arn>>
              steps:
                - aws-cli/role-arn-setup:
                    profile-name: <<parameters.new-profile-name>>
                    role-arn: <<parameters.role-arn>>
                    source-profile: <<parameters.source-profile>>
          - when:
              condition:
                and:
                  - <<parameters.role-arn>>
                  - <<parameters.new-profile-name>>
              steps:
                - run:
                    command: |
                      #!/bin/bash
                      REGION=$(eval echo "${PARAM_REGION}")
                      ACCOUNT_URL="${!PARAM_REGISTRY_ID}.dkr.ecr.${REGION}.amazonaws.com"
                      ECR_COMMAND="ecr"

                      if [ "$PARAM_PUBLIC_REGISTRY" == "1" ]; then
                          REGION="us-east-1"
                          ACCOUNT_URL="public.ecr.aws"
                          ECR_COMMAND="ecr-public"
                      fi

                      if [ -n "${PARAM_PROFILE_NAME}" ]; then
                          set -- "$@" --profile "${PARAM_PROFILE_NAME}"
                      fi

                      if [ -f ~/.docker/config.json ]; then
                          echo "Credential helper is already installed"
                      else
                          aws "${ECR_COMMAND}" get-login-password --region "${REGION}" "$@" | docker login --username AWS --password-stdin "${ACCOUNT_URL}"
                      fi
                    environment:
                      PARAM_PROFILE_NAME: <<parameters.new-profile-name>>
                      PARAM_PUBLIC_REGISTRY: <<parameters.public-registry>>
                      PARAM_REGION: <<parameters.region>>
                      PARAM_REGISTRY_ID: <<parameters.registry-id>>
                    name: Log into Amazon ECR with profile <<parameters.new-profile-name>>
          - unless:
              condition:
                and:
                  - <<parameters.role-arn>>
                  - <<parameters.new-profile-name>>
              steps:
                - run:
                    command: |
                      #!/bin/bash
                      REGION=$(eval echo "${PARAM_REGION}")
                      ACCOUNT_URL="${!PARAM_REGISTRY_ID}.dkr.ecr.${REGION}.amazonaws.com"
                      ECR_COMMAND="ecr"

                      if [ "$PARAM_PUBLIC_REGISTRY" == "1" ]; then
                          REGION="us-east-1"
                          ACCOUNT_URL="public.ecr.aws"
                          ECR_COMMAND="ecr-public"
                      fi

                      if [ -n "${PARAM_PROFILE_NAME}" ]; then
                          set -- "$@" --profile "${PARAM_PROFILE_NAME}"
                      fi

                      if [ -f ~/.docker/config.json ]; then
                          echo "Credential helper is already installed"
                      else
                          aws "${ECR_COMMAND}" get-login-password --region "${REGION}" "$@" | docker login --username AWS --password-stdin "${ACCOUNT_URL}"
                      fi
                    environment:
                      PARAM_PROFILE_NAME: <<parameters.profile-name>>
                      PARAM_PUBLIC_REGISTRY: <<parameters.public-registry>>
                      PARAM_REGION: <<parameters.region>>
                      PARAM_REGISTRY_ID: <<parameters.registry-id>>
                    name: Log into Amazon ECR with profile <<parameters.profile-name>>

jobs: # a collection of steps
  check_ecr_login:
    parallelism: 1
    executor: aws-ecr/default
    parameters:
      aws-access-key-id:
        default: AWS_ACCESS_KEY_ID
        description: |
          AWS access key id for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_ACCESS_KEY_ID.
        type: env_var_name
      aws-cli-version:
        default: latest
        description: Select a specific version of the AWS v2 CLI. By default the latest version will be used.
        type: string
      aws-secret-access-key:
        default: AWS_SECRET_ACCESS_KEY
        description: |
          AWS secret key for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
        type: env_var_name
      new-profile-name:
        default: ""
        description: Name of new profile associated with role arn.
        type: string
      profile-name:
        default: default
        description: AWS profile name to be configured.
        type: string
      public-registry:
        default: false
        description: Set to true if building and pushing an image to a Public Registry on ECR.
        type: boolean
      region:
        default: ${AWS_REGION}
        description: |
          AWS region of ECR repository. Defaults to environment variable ${AWS_REGION}
        type: string
      registry-id:
        default: AWS_ECR_REGISTRY_ID
        description: |
          The 12 digit AWS id associated with the ECR account. This field is required
        type: env_var_name
      role-arn:
        default: ""
        description: Role ARN that the profile should take.
        type: string
      source-profile:
        default: default
        description: Source profile containing credentials to assume the role with role-arn.
        type: string
    steps:
      - checkout
      # use kelvintaywl-aws-ecr to check login with ECR
      - kelvintaywl-aws-ecr/ecr-login:
          aws-access-key-id: <<parameters.aws-access-key-id>>
          aws-cli-version: <<parameters.aws-cli-version>>
          aws-secret-access-key: <<parameters.aws-secret-access-key>>
          new-profile-name: <<parameters.new-profile-name>>
          profile-name: <<parameters.profile-name>>
          public-registry: <<parameters.public-registry>>
          region: <<parameters.region>>
          registry-id: <<parameters.registry-id>>
          role-arn: <<parameters.role-arn>>
          source-profile: <<parameters.source-profile>>

workflows:
  build_and_push_image:
    jobs:
      - check_ecr_login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          context: myContext
          new-profile-name: prodaccess
          profile-name: default
          public-registry: false
          region: ap-northeast-1
          registry-id: REGISTRY_ID
          role-arn: 'arn:aws:iam::638488274222:role/Sw_Techlearn017_InfrMaster'
          source-profile: default
