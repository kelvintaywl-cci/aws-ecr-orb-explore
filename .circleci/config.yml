version: 2.1

orbs:
  # updated version
  # imported from https://github.com/kelvintaywl/aws-ecr-orb/tree/fix-use-new-profile-name
  kelvintaywl-aws-ecr:
    version: 2.1
    description: |
        Build images and push them to the Amazon Elastic Container Registry.
    display:
        home_url: https://aws.amazon.com/ecr/
        source_url: https://github.com/CircleCI-Public/aws-ecr-orb
    orbs:
        aws-cli: circleci/aws-cli@2.1.0
    commands:
        build-image:
            description: Build a docker image with Docker Buildx
            parameters:
                dockerfile:
                    default: Dockerfile
                    description: Name of dockerfile to use. Defaults to Dockerfile.
                    type: string
                extra-build-args:
                    default: ""
                    description: |
                        Extra flags to pass to docker build. For examples, see https://docs.docker.com/engine/reference/commandline/buildx
                    type: string
                no-output-timeout:
                    default: 10m
                    description: The amount of time to allow the docker command to run before timing out.
                    type: string
                path:
                    default: .
                    description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
                    type: string
                platform:
                    default: linux/amd64
                    description: Platform targets for the docker image, multi arch images. Ex. linux/amd64,linux/arm64.
                    type: string
                profile-name:
                    default: default
                    description: |
                        AWS profile name to be configured. Only required when skip-when-tags-exist or ecr-login are set to true.
                    type: string
                public-registry:
                    default: false
                    description: Set to true if building and pushing an image to a Public Registry on ECR.
                    type: boolean
                push-image:
                    default: true
                    description: Set to false to build an image without pushing to repository.  Defaults to true.
                    type: boolean
                region:
                    default: ${AWS_REGION}
                    description: |
                        AWS region of ECR repository. Defaults to environment variable ${AWS_REGION}
                    type: string
                registry-id:
                    default: AWS_ECR_REGISTRY_ID
                    description: |
                        The 12 digit AWS Registry ID associated with the ECR account. This field is required
                    type: env_var_name
                repo:
                    description: Name of an Amazon ECR repository
                    type: string
                skip-when-tags-exist:
                    default: false
                    description: Whether to skip image building if all specified tags already exist in ECR
                    type: boolean
                tag:
                    default: latest
                    description: A comma-separated string containing docker image tags (default = latest)
                    type: string
            steps:
                - run:
                    command: |
                        #!/bin/bash
                        REPO=$(eval echo "${PARAM_REPO}")
                        REGION=$(eval echo "${PARAM_REGION}")
                        TAG=$(eval echo "${PARAM_TAG}")
                        ACCOUNT_URL="${!PARAM_REGISTRY_ID}.dkr.ecr.${REGION}.amazonaws.com"
                        ECR_COMMAND="ecr"
                        number_of_tags_in_ecr=0
                        docker_tag_args=""

                        IFS="," read -ra PLATFORMS \<<<"${PARAM_PLATFORM}"
                        arch_count=${#PLATFORMS[@]}

                        if [ "${PARAM_PUBLIC_REGISTRY}" == "1" ]; then
                          if [ "$arch_count" -gt 1 ]; then
                            echo "AWS ECR does not support multiple platforms for public registries. Please specify only one platform and try again"
                            exit 1
                          fi

                          ECR_COMMAND="ecr-public"
                          ACCOUNT_URL="public.ecr.aws/${!PARAM_REGISTRY_ID}"
                        fi

                        IFS="," read -ra DOCKER_TAGS \<<<"${TAG}"
                        for tag in "${DOCKER_TAGS[@]}"; do
                          if [ "${PARAM_SKIP_WHEN_TAGS_EXIST}" = "1" ]; then
                            docker_tag_exists_in_ecr=$(aws "${ECR_COMMAND}" describe-images --profile "${PARAM_PROFILE_NAME}" --registry-id "${!PARAM_REGISTRY_ID}" --region "${REGION}" --repository-name "${REPO}" --query "contains(imageDetails[].imageTags[], '${tag}')")
                            if [ "${docker_tag_exists_in_ecr}" = "1" ]; then
                              docker pull "${ACCOUNT_URL}/${REPO}:${tag}"
                              number_of_tags_in_ecr=$((number_of_tags_in_ecr += 1))
                            fi
                          fi
                          docker_tag_args="${docker_tag_args} -t ${ACCOUNT_URL}/${REPO}:${tag}"
                        done

                        if [ "${PARAM_SKIP_WHEN_TAGS_EXIST}" = "0" ] || [[ "${PARAM_SKIP_WHEN_TAGS_EXIST}" = "1" && ${number_of_tags_in_ecr} -lt ${#DOCKER_TAGS[@]} ]]; then
                          if [ "${PARAM_PUSH_IMAGE}" == "1" ]; then
                            set -- "$@" --push
                          fi

                          if [ -n "$PARAM_EXTRA_BUILD_ARGS" ]; then
                            set -- "$@" "${PARAM_EXTRA_BUILD_ARGS}"
                          fi

                          if [ "${PARAM_PUBLIC_REGISTRY}" == "1" ]; then
                            docker buildx build \
                              -f "${PARAM_PATH}"/"${PARAM_DOCKERFILE}" \
                              ${docker_tag_args} \
                              --platform "${PARAM_PLATFORM}" \
                              --progress plain \
                              "$@" \
                              "${PARAM_PATH}"
                          else
                            docker context create builder
                            docker run --privileged --rm tonistiigi/binfmt --install all
                            docker --context builder buildx create --use
                            docker --context builder buildx build \
                              -f "${PARAM_PATH}"/"${PARAM_DOCKERFILE}" \
                              ${docker_tag_args} \
                              --platform "${PARAM_PLATFORM}" \
                              --progress plain \
                              "$@" \
                              "${PARAM_PATH}"
                          fi
                        fi
                    environment:
                        PARAM_DOCKERFILE: <<parameters.dockerfile>>
                        PARAM_EXTRA_BUILD_ARGS: <<parameters.extra-build-args>>
                        PARAM_PATH: <<parameters.path>>
                        PARAM_PLATFORM: <<parameters.platform>>
                        PARAM_PROFILE_NAME: <<parameters.profile-name>>
                        PARAM_PUBLIC_REGISTRY: <<parameters.public-registry>>
                        PARAM_PUSH_IMAGE: <<parameters.push-image>>
                        PARAM_REGION: <<parameters.region>>
                        PARAM_REGISTRY_ID: <<parameters.registry-id>>
                        PARAM_REPO: << parameters.repo >>
                        PARAM_SKIP_WHEN_TAGS_EXIST: <<parameters.skip-when-tags-exist>>
                        PARAM_TAG: << parameters.tag >>
                    name: Build Docker Image with buildx
                    no_output_timeout: <<parameters.no-output-timeout>>
        create-repo:
            description: Create a new AWS ECR repository.
            parameters:
                profile-name:
                    default: default
                    description: AWS profile name to be configured.
                    type: string
                public-registry:
                    default: false
                    description: Set to true if building and pushing an image to a Public Registry on ECR.
                    type: boolean
                region:
                    default: ${AWS_REGION}
                    description: |
                        AWS region of ECR repository. Defaults to environment variable ${AWS_REGION}
                    type: string
                repo:
                    description: Name of an Amazon ECR repository
                    type: string
                repo-scan-on-push:
                    default: true
                    description: Should the created repo be security scanned on push?
                    type: boolean
            steps:
                - run:
                    command: |
                        #!/bin/bash
                        REGION=$(eval echo "${PARAM_REGION}")
                        REPO=$(eval echo "${PARAM_REPO}")

                        if [ "$PARAM_PUBLIC_REGISTRY" == "1" ]; then
                            aws ecr-public describe-repositories --profile "${PARAM_PROFILE_NAME}" --region us-east-1 --repository-names "${REPO}" >/dev/null 2>&1 ||
                                aws ecr-public create-repository --profile "${PARAM_PROFILE_NAME}" --region us-east-1 --repository-name "${REPO}"
                        else
                            aws ecr describe-repositories --profile "${PARAM_PROFILE_NAME}" --region "${REGION}" --repository-names "${REPO}" >/dev/null 2>&1 ||
                                if [ "$PARAM_REPO_SCAN_ON_PUSH" == "1" ]; then
                                    aws ecr create-repository --profile "${PARAM_PROFILE_NAME}" --region "${REGION}" --repository-name "${REPO}" --image-scanning-configuration scanOnPush=true
                                else
                                    aws ecr create-repository --profile "${PARAM_PROFILE_NAME}" --region "${REGION}" --repository-name "${REPO}" --image-scanning-configuration scanOnPush=false
                                fi
                        fi
                    environment:
                        PARAM_PROFILE_NAME: <<parameters.profile-name>>
                        PARAM_PUBLIC_REGISTRY: <<parameters.public-registry>>
                        PARAM_REGION: <<parameters.region>>
                        PARAM_REPO: <<parameters.repo>>
                        PARAM_REPO_SCAN_ON_PUSH: <<parameters.repo-scan-on-push>>
                    name: Create Repository
        ecr-login:
            description: Authenticate into the Amazon ECR service
            parameters:
                aws-access-key-id:
                    default: AWS_ACCESS_KEY_ID
                    description: |
                        AWS access key id for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_ACCESS_KEY.
                    type: env_var_name
                aws-cli-version:
                    default: latest
                    description: Select a specific version of the AWS v2 CLI. By default the latest version will be used.
                    type: string
                aws-secret-access-key:
                    default: AWS_SECRET_ACCESS_KEY
                    description: |
                        AWS secret key for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
                    type: env_var_name
                new-profile-name:
                    default: ""
                    description: Name of new profile associated with role arn.
                    type: string
                profile-name:
                    default: ""
                    description: |
                        AWS profile name to be configured.
                    type: string
                public-registry:
                    default: false
                    description: Set to true if building and pushing an image to a Public Registry on ECR.
                    type: boolean
                region:
                    default: ${AWS_REGION}
                    description: |
                        AWS region of ECR repository. Defaults to environment variable ${AWS_REGION}
                    type: string
                registry-id:
                    default: AWS_ECR_REGISTRY_ID
                    description: |
                        The 12 digit AWS id associated with the ECR account. This field is required
                    type: env_var_name
                role-arn:
                    default: ""
                    description: Role ARN that the profile should take.
                    type: string
                source-profile:
                    default: default
                    description: Source profile containing credentials to assume the role with role-arn.
                    type: string
            steps:
                - aws-cli/setup:
                    aws-access-key-id: <<parameters.aws-access-key-id>>
                    aws-secret-access-key: <<parameters.aws-secret-access-key>>
                    profile-name: <<parameters.profile-name>>
                    version: <<parameters.aws-cli-version>>
                - when:
                    condition: <<parameters.role-arn>>
                    steps:
                        - aws-cli/role-arn-setup:
                            profile-name: <<parameters.new-profile-name>>
                            role-arn: <<parameters.role-arn>>
                            source-profile: <<parameters.source-profile>>
                - when:
                    condition:
                        and:
                            - <<parameters.role-arn>>
                            - <<parameters.new-profile-name>>
                    steps:
                        - run:
                            command: |
                                #!/bin/bash
                                REGION=$(eval echo "${PARAM_REGION}")
                                ACCOUNT_URL="${!PARAM_REGISTRY_ID}.dkr.ecr.${REGION}.amazonaws.com"
                                ECR_COMMAND="ecr"

                                if [ "$PARAM_PUBLIC_REGISTRY" == "1" ]; then
                                    REGION="us-east-1"
                                    ACCOUNT_URL="public.ecr.aws"
                                    ECR_COMMAND="ecr-public"
                                fi

                                if [ -n "${PARAM_PROFILE_NAME}" ]; then
                                    set -- "$@" --profile "${PARAM_PROFILE_NAME}"
                                fi

                                if [ -f ~/.docker/config.json ]; then
                                    echo "Credential helper is already installed"
                                else
                                    aws "${ECR_COMMAND}" get-login-password --region "${REGION}" "$@" | docker login --username AWS --password-stdin "${ACCOUNT_URL}"
                                fi
                            environment:
                                PARAM_PROFILE_NAME: <<parameters.new-profile-name>>
                                PARAM_PUBLIC_REGISTRY: <<parameters.public-registry>>
                                PARAM_REGION: <<parameters.region>>
                                PARAM_REGISTRY_ID: <<parameters.registry-id>>
                            name: Log into Amazon ECR with profile <<parameters.new-profile-name>>
                - unless:
                    condition:
                        and:
                            - <<parameters.role-arn>>
                            - <<parameters.new-profile-name>>
                    steps:
                        - run:
                            command: |
                                #!/bin/bash
                                REGION=$(eval echo "${PARAM_REGION}")
                                ACCOUNT_URL="${!PARAM_REGISTRY_ID}.dkr.ecr.${REGION}.amazonaws.com"
                                ECR_COMMAND="ecr"

                                if [ "$PARAM_PUBLIC_REGISTRY" == "1" ]; then
                                    REGION="us-east-1"
                                    ACCOUNT_URL="public.ecr.aws"
                                    ECR_COMMAND="ecr-public"
                                fi

                                if [ -n "${PARAM_PROFILE_NAME}" ]; then
                                    set -- "$@" --profile "${PARAM_PROFILE_NAME}"
                                fi

                                if [ -f ~/.docker/config.json ]; then
                                    echo "Credential helper is already installed"
                                else
                                    aws "${ECR_COMMAND}" get-login-password --region "${REGION}" "$@" | docker login --username AWS --password-stdin "${ACCOUNT_URL}"
                                fi
                            environment:
                                PARAM_PROFILE_NAME: <<parameters.profile-name>>
                                PARAM_PUBLIC_REGISTRY: <<parameters.public-registry>>
                                PARAM_REGION: <<parameters.region>>
                                PARAM_REGISTRY_ID: <<parameters.registry-id>>
                            name: Log into Amazon ECR with profile <<parameters.profile-name>>
        tag-image:
            description: Add a tag to an existing published image
            parameters:
                repo:
                    description: Name of an Amazon ECR repository
                    type: string
                source-tag:
                    description: An existing Docker image tag
                    type: string
                target-tag:
                    default: latest
                    description: A comma-separated string containing docker image tags (default = latest)
                    type: string
            steps:
                - run:
                    command: |
                        #!/bin/bash
                        REPO=$(eval echo "${PARAM_REPO}")

                        # pull the image manifest from ECR
                        MANIFEST=$(aws ecr batch-get-image --repository-name "${REPO}" --image-ids imageTag="${PARAM_SOURCE_TAG}" --query 'images[].imageManifest' --output text)
                        IFS="," read -ra ECR_TAGS \<<<"${PARAM_TARGET_TAG}"
                        for tag in "${ECR_TAGS[@]}"; do
                            aws ecr put-image --repository-name "${REPO}" --image-tag "${tag}" --image-manifest "${MANIFEST}"
                        done
                    environment:
                        PARAM_REPO: <<parameters.repo>>
                        PARAM_SOURCE_TAG: <<parameters.source-tag>>
                        PARAM_TARGET_TAG: <<parameters.target-tag>>
                    name: <<parameters.target-tag>> tag to <<parameters.repo>>:<<parameters.source-tag>>
    executors:
        default:
            description: |
                CircleCI's Ubuntu-based machine executor VM: https://circleci.com/docs/2.0/executor-types/#using-machine
            machine:
                docker_layer_caching: <<parameters.use-docker-layer-caching>>
                image: <<parameters.image>>
            parameters:
                image:
                    default: ubuntu-2004:202107-02
                    type: string
                resource-class:
                    default: medium
                    type: string
                use-docker-layer-caching:
                    default: false
                    type: boolean
            resource_class: <<parameters.resource-class>>
    jobs:
        build-and-push-image:
            description: |
                Install AWS CLI, if needed, and configure. Log into Amazon ECR and push image to repository. Requires environment variables for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. We recommend these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in Contexts (https://circleci.com/docs/2.0/contexts).
            executor: << parameters.executor >>
            parameters:
                attach-workspace:
                    default: false
                    description: |
                        Boolean for whether or not to attach to an existing workspace. Default is false.
                    type: boolean
                aws-access-key-id:
                    default: AWS_ACCESS_KEY_ID
                    description: |
                        AWS access key id for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_ACCESS_KEY_ID.
                    type: env_var_name
                aws-cli-version:
                    default: latest
                    description: Select a specific version of the AWS v2 CLI. By default the latest version will be used.
                    type: string
                aws-secret-access-key:
                    default: AWS_SECRET_ACCESS_KEY
                    description: |
                        AWS secret key for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
                    type: env_var_name
                create-repo:
                    default: false
                    description: Should the repo be created if it does not exist?
                    type: boolean
                docker-login:
                    default: false
                    description: |
                        Enable dockerhub authentication. Defaults to false.
                    type: boolean
                dockerfile:
                    default: Dockerfile
                    description: Name of dockerfile to use. Defaults to Dockerfile.
                    type: string
                dockerhub-password:
                    default: DOCKERHUB_PASSWORD
                    description: |
                        Dockerhub password to be configured. Set this to the name of the environment variable you will set to hold this value, i.e. DOCKERHUB_PASSWORD.
                    type: env_var_name
                dockerhub-username:
                    default: DOCKERHUB_USERNAME
                    description: |
                        Dockerhub username to be configured. Set this to the name of the environment variable you will set to hold this value, i.e. DOCKERHUB_USERNAME.
                    type: env_var_name
                executor:
                    default: default
                    description: |
                        Executor to use for this job.
                    type: executor
                extra-build-args:
                    default: ""
                    description: |
                        Extra flags to pass to docker build. For examples, see https://docs.docker.com/engine/reference/commandline/build
                    type: string
                new-profile-name:
                    default: ""
                    description: Name of new profile associated with role arn.
                    type: string
                no-output-timeout:
                    default: 10m
                    description: |
                        The amount of time to allow the docker build command to run before timing out. Defaults to '10m'
                    type: string
                path:
                    default: .
                    description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
                    type: string
                platform:
                    default: linux/amd64
                    description: Platform targets for the docker image, multi arch images. Ex. linux/amd64,linux/arm64
                    type: string
                profile-name:
                    default: default
                    description: AWS profile name to be configured.
                    type: string
                public-registry:
                    default: false
                    description: Set to true if building and pushing an image to a Public Registry on ECR.
                    type: boolean
                push-image:
                    default: true
                    description: Set to false to build an image without pushing to repository.  Defaults to true.
                    type: boolean
                region:
                    default: ${AWS_REGION}
                    description: |
                        AWS region of ECR repository. Defaults to environment variable ${AWS_REGION}
                    type: string
                registry-id:
                    default: AWS_ECR_REGISTRY_ID
                    description: |
                        The 12 digit AWS id associated with the ECR account. This field is required
                    type: env_var_name
                remote-docker-layer-caching:
                    default: false
                    description: |
                        Enable Docker layer caching if using remote Docker engine. Requires setup-remote-docker to be set to true. Defaults to false.
                    type: boolean
                remote-docker-version:
                    default: 19.03.13
                    description: Specific remote docker version
                    type: string
                repo:
                    description: Name of an Amazon ECR repository
                    type: string
                repo-scan-on-push:
                    default: true
                    description: Should the created repo be security scanned on push?
                    type: boolean
                role-arn:
                    default: ""
                    description: Role ARN that the profile should take.
                    type: string
                setup-remote-docker:
                    default: false
                    description: |
                        Setup and use CircleCI's remote Docker environment for Docker and docker-compose commands? Not required if using the default executor
                    type: boolean
                skip-when-tags-exist:
                    default: false
                    description: Whether to skip image building if all specified tags already exist in ECR
                    type: boolean
                source-profile:
                    default: default
                    description: Source profile containing credentials to assume the role with role-arn.
                    type: string
                tag:
                    default: latest
                    description: A comma-separated string containing docker image tags to build and push (default = latest)
                    type: string
                workspace-root:
                    default: .
                    description: |
                        Workspace root path that is either an absolute path or a path relative to the working directory. Defaults to '.' (the working directory)
                    type: string
            steps:
                - checkout
                - when:
                    condition: <<parameters.attach-workspace>>
                    steps:
                        - attach_workspace:
                            at: <<parameters.workspace-root>>
                - when:
                    condition:
                        and:
                            - <<parameters.remote-docker-layer-caching>>
                            - not: <<parameters.setup-remote-docker>>
                    steps:
                        - run: echo "Docker Layer Caching requires Setup Remote Docker command" && exit 1
                - when:
                    condition: <<parameters.setup-remote-docker>>
                    steps:
                        - setup_remote_docker:
                            docker_layer_caching: <<parameters.remote-docker-layer-caching>>
                            version: <<parameters.remote-docker-version>>
                - ecr-login:
                    aws-access-key-id: <<parameters.aws-access-key-id>>
                    aws-cli-version: <<parameters.aws-cli-version>>
                    aws-secret-access-key: <<parameters.aws-secret-access-key>>
                    new-profile-name: <<parameters.new-profile-name>>
                    profile-name: <<parameters.profile-name>>
                    public-registry: <<parameters.public-registry>>
                    region: <<parameters.region>>
                    registry-id: <<parameters.registry-id>>
                    role-arn: <<parameters.role-arn>>
                    source-profile: <<parameters.source-profile>>
                - when:
                    condition:
                        and:
                            - <<parameters.create-repo>>
                            - <<parameters.role-arn>>
                            - <<parameters.new-profile-name>>
                    steps:
                        - create-repo:
                            profile-name: <<parameters.new-profile-name>>
                            public-registry: <<parameters.public-registry>>
                            region: <<parameters.region>>
                            repo: <<parameters.repo>>
                            repo-scan-on-push: <<parameters.repo-scan-on-push>>
                - when:
                    condition:
                        and:
                            - <<parameters.create-repo>>
                            - <<parameters.profile-name>>
                    steps:
                        - create-repo:
                            profile-name: <<parameters.profile-name>>
                            public-registry: <<parameters.public-registry>>
                            region: <<parameters.region>>
                            repo: <<parameters.repo>>
                            repo-scan-on-push: <<parameters.repo-scan-on-push>>
                - when:
                    condition: <<parameters.docker-login>>
                    steps:
                        - run: |
                            docker login -u $<<parameters.dockerhub-username>> -p $<<parameters.dockerhub-password>>
                - when:
                    condition:
                        and:
                            - <<parameters.role-arn>>
                            - <<parameters.new-profile-name>>
                    steps:
                        - build-image:
                            dockerfile: <<parameters.dockerfile>>
                            extra-build-args: <<parameters.extra-build-args>>
                            no-output-timeout: <<parameters.no-output-timeout>>
                            path: <<parameters.path>>
                            platform: <<parameters.platform>>
                            profile-name: <<parameters.new-profile-name>>
                            public-registry: <<parameters.public-registry>>
                            push-image: <<parameters.push-image>>
                            region: <<parameters.region>>
                            registry-id: <<parameters.registry-id>>
                            repo: <<parameters.repo>>
                            skip-when-tags-exist: <<parameters.skip-when-tags-exist>>
                            tag: <<parameters.tag>>
                - unless:
                    condition:
                        and:
                            - <<parameters.role-arn>>
                            - <<parameters.new-profile-name>>
                    steps:
                        - build-image:
                            dockerfile: <<parameters.dockerfile>>
                            extra-build-args: <<parameters.extra-build-args>>
                            no-output-timeout: <<parameters.no-output-timeout>>
                            path: <<parameters.path>>
                            platform: <<parameters.platform>>
                            profile-name: <<parameters.profile-name>>
                            public-registry: <<parameters.public-registry>>
                            push-image: <<parameters.push-image>>
                            region: <<parameters.region>>
                            registry-id: <<parameters.registry-id>>
                            repo: <<parameters.repo>>
                            skip-when-tags-exist: <<parameters.skip-when-tags-exist>>
                            tag: <<parameters.tag>>
    examples:
        simple-build-and-push:
            description: Log into AWS, build and push image to Amazon ECR
            usage:
                version: "2.1"
                orbs:
                    aws-ecr: circleci/aws-ecr@x.y
                workflows:
                    build_and_push_image:
                        jobs:
                            - aws-ecr/build-and-push-image:
                                aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
                                aws-cli-version: latest
                                aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
                                context: myContext
                                create-repo: true
                                dockerfile: myDockerfile
                                executor: aws-ecr/default
                                extra-build-args: --compress
                                new-profile-name: newProfileName
                                no-output-timeout: 20m
                                path: pathToMyDockerfile
                                platform: linux/amd64
                                profile-name: myProfileName
                                public-registry: false
                                push-image: true
                                region: AWS_REGION
                                registry-id: AWS_ECR_REGISTRY_ID
                                repo: myECRRepository
                                repo-scan-on-push: true
                                role-arn: arn:aws:iam::123456789012:role/testing
                                skip-when-tags-exist: false
                                source-profile: sourceProfileName
                                tag: latest,myECRRepoTag



workflows:
  explore:
    jobs:
      - kelvintaywl-aws-ecr/build-and-push-image:
          dockerfile: Dockerfile
          executor: kelvintaywl-aws-ecr/default
          new-profile-name: ecr-crud  # for IAM role
          profile-name: default  # for IAM user
          public-registry: false
          push-image: true
          repo: kelvin-hello-alpine
          role-arn: 'arn:aws:iam::660990364978:role/kelvin-ecr-crud-role'
          skip-when-tags-exist: false
          source-profile: default
          tag: '${CIRCLE_SHA1}'
          region: 'us-east-1'
